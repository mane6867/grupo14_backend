#services: # The containers we are going to run
#  app:
#    build:
#      context: ./my_api # The path in the machine that have the files, in this case root
#      dockerfile: Dockerfile # The name of the Dockerfile definition
#    container_name: api-container
#    restart: unless-stopped
#    volumes:
#      - ./src:/app/src # To copy changes in the local machine to the container.
#    ports:
#      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
#    networks:
#      - app-network # Connect the app to the network, in this case to use the database
#    depends_on: # Build dependencies in case one containers needs another to be builded first
#      - db # To build after the database
#    environment:
#      DATABASE_USER: arqui_user
#      DATABASE_PASSWORD: arqui_password
#
#  db: # The database service
#    image: postgres:latest # Using the oficial dockerhub image
#    container_name: my-postgres-arqui
#    networks:
#      - app-network # Connect to the network to be used by other containers (ej: the web server)
#    environment: # all the enviroment variables defined in the container (see postgres official image docs https://hub.docker.com/_/postgres)
#      POSTGRES_USER: arqui_user
#      POSTGRES_PASSWORD: arqui_password
#      POSTGRES_DB: arqui_1
#    ports:
#      - "5432:5432"
#    volumes:
#      # To persist the data in the database we have a volume that persist after container deletion
#      # and copy the files from the container to the volume.
#      - db-volume:/var/lib/postgresql/data 
#
#  mqtt: 
#    build:
#      context: ./listener # The path in the machine that have the files, in this case root
#      dockerfile: Dockerfile
#    container_name: listener
#    restart: unless-stopped
#    ports:
#      - "1883:1883"
#    networks:
#      - app-network
#
#networks: # All the networks that connects our containers
#  app-network:
#    driver: bridge
#
#volumes: # All the named volumes needed to persist data after container deletion
#  db-volume:

services:
  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

    networks:
      - backend

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: api-container
    ports:
      - "3000:3000"
    env_file:
      - .env

    depends_on:
      - db
    environment:
      DATABASE_USER: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network
      - backend

  mqtt:
    build: 
      context: ./listener
      dockerfile: Dockerfile
    volumes:
      - ./listener:/listener
    env_file:
      - .env
    restart: unless-stopped
    container_name: listener
    networks:
      - app-network
    

networks: # All the networks that connects our containers
  app-network:
    driver: bridge
  backend:
    driver: bridge
  

volumes:
  postgres-data:

